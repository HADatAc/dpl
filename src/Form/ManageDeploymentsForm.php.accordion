<?php

namespace Drupal\dpl\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\dpl\Form\ListDeploymentStatePage;
use Drupal\rep\Utils;
use Drupal\rep\Entity\Deployment;

class ManageDeploymentsForm extends FormBase {

  public function getFormId() {
    return 'dpl_manage_deployments_form';
  }

  protected $manager_email;

  protected $manager_name;

  protected $state;

  protected $header;

  protected $output;

  protected $list_size;

  protected $page_size;

  public function getManagerEmail() {
    return $this->manager_email;
  }
  public function setManagerEmail($manager_email) {
    return $this->manager_email = $manager_email; 
  }

  public function getManagerName() {
    return $this->manager_name;
  }
  public function setManagerName($manager_name) {
    return $this->manager_name = $manager_name; 
  }

  public function getState() {
    return $this->state;
  }
  public function setState($state) {
    return $this->state = $state; 
  }

  public function getHeader() {
    return $this->header;
  }
  public function setHeader($header) {
    return $this->header = $header; 
  }

  public function getOutput() {
    return $this->output;
  }
  public function setOutput($output) {
    return $this->output = $output; 
  }

  public function getListSize() {
    return $this->list_size;
  }
  public function setListSize($list_size) {
    return $this->list_size = $list_size; 
  }

  public function getPageSize() {
    return $this->page_size;
  }
  public function setPageSize($page_size) {
    return $this->page_size = $page_size; 
  }

  public function buildForm(array $form, FormStateInterface $form_state, $state=NULL, $page=NULL, $pagesize=NULL) {
    // GET manager EMAIL
    $current_user = \Drupal::currentUser();
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($current_user->id());
    $this->setManagerEmail($user->getEmail());
    $this->setManagerName($user->getAccountName());

    // RETRIEVE ELEMENTS
    $list = [
      1 => ListDeploymentStatePage::exec('design', $this->getManagerEmail(), 1, $pagesize),
      2 => ListDeploymentStatePage::exec('active', $this->getManagerEmail(), 1, $pagesize),
      3 => ListDeploymentStatePage::exec('closed', $this->getManagerEmail(), 1, $pagesize),
    ];
    $header = [
      1 => Deployment::generateHeader('design'),
      2 => Deployment::generateHeader('active'),
      3 => Deployment::generateHeader('closed'),
    ];
    $this->setHeader($header);
    $output = [
      1 => Deployment::generateOutput('design', $list[1]),    
      2 => Deployment::generateOutput('active', $list[2]),    
      3 => Deployment::generateOutput('closed', $list[3]),    
    ];
    $this->setOutput($output);


    // Attach custom library.
    $form['#attached']['library'][] = 'dpl/dpl_accordion';

    // PUT FORM TOGETHER
    $form['page_title'] = [
      '#type' => 'item',
      '#title' => $this->t('<h3>Manage Deployments</h3>'),
    ];
    $form['page_subtitle'] = [
      '#type' => 'item',
      '#title' => $this->t('<h4>Deployments maintained by <font color="DarkGreen">' . $this->getManagerName() . ' (' . $this->getManagerEmail() . ')</font></h4>'),
    ];
    // Initialize accordion container.
    $form['accordion'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['accordion']],
    ];

    // Define each accordion item.
    for ($i = 1; $i <= 3; $i++) {
      $form['accordion']['item_' . $i] = $this->buildAccordionItem($i, $form_state, $header, $output);
    }

    // Add a submit button.
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Submit'),
    ];

    return $form;
  }

  private function buildAccordionItem($id, FormStateInterface $form_state, $header, $output) {
    $active_class = ($id == 1) ? 'show' : '';
    //$active_class = 'show';

    $header = $this->getHeader();
    $output = $this->getOutput();
    //dpm($output[$id]);

    // Build the sub-form for each accordion item.
    $sub_form = [
      '#type' => 'container',
      '#attributes' => ['class' => ['accordion-body']],
      'field_' . $id . '_1' => [
        '#type' => 'textfield',
        '#title' => $this->t('Field 1 for Option @id', ['@id' => $id]),
      ],
      'table_' . $id . '_2' => [
        '#type' => 'tableselect',
        '#header' => $header[$id],
        '#options' => $output[$id],
        '#js_select' => FALSE,
        '#empty' => t('No deployment has been found'),
      ],
      //'field_' . $id . '_2' => [
      //  '#type' => 'textfield',
      //  '#title' => $this->t('Field 2 for Option @id', ['@id' => $id]),
      //],
    ];

    // Render the sub-form elements.
    $sub_form_rendered = \Drupal::service('renderer')->render($sub_form);

    $tabTitle = ' ';
    if ($id == 1) {
      $tabTitle = "Upcoming Deployments";
    } else if ($id == 2) {
      $tabTitle = "Active Deployments";
    } else {
      $tabTitle = "Completed Deployments";
    }
    // Build the accordion item as a Drupal render array.
    return [
      '#type' => 'container',
      '#attributes' => ['class' => ['card']],
      'header' => [
        '#type' => 'container',
        '#attributes' => ['class' => ['card-header']],
        'button' => [
          '#type' => 'button',
          '#value' => $this->t('<h5 class="mb-0">' . $tabTitle . '</h5>'),
          '#attributes' => [
            'class' => ['btn', 'btn-link', 'transparent-button'],
            'type' => 'button',
            'data-bs-toggle' => 'collapse',
            'data-bs-target' => '#collapse' . $id,
            'aria-expanded' => 'true',
            'aria-controls' => 'collapse' . $id,
          ],
        ],
      ],
      'collapse' => [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'collapse' . $id,
          'class' => ['collapse', $active_class],
          'aria-labelledby' => 'heading' . $id,
          'data-bs-parent' => '#accordionExample',
        ],
        'body' => [
          '#type' => 'container',
          '#attributes' => ['class' => ['card-body']],
          '#markup' => $sub_form_rendered,
        ],
      ],
    ];
  }

  public function submitForm(array &$form, FormStateInterface $form_state) {
    // Handle form submission.
    $this->messenger()->addMessage($this->t('Form has been submitted.'));
  }
}
