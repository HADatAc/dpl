<?php

namespace Drupal\dpl\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\dpl\Form\ListDeploymentStatePage;
use Drupal\rep\Utils;
use Drupal\rep\Entity\Deployment;

class ManageDeploymentsForm extends FormBase {

  public function getFormId() {
    return 'dpl_manage_deployments_form';
  }

  public $header;
  public $output;
  protected $manager_email;
  protected $manager_name;
  protected $state;
  protected $list;
  protected $list_size;
  protected $page_size;

  public function getManagerEmail() {
    return $this->manager_email;
  }

  public function setManagerEmail($manager_email) {
    $this->manager_email = $manager_email; 
  }

  public function getManagerName() {
    return $this->manager_name;
  }

  public function setManagerName($manager_name) {
    $this->manager_name = $manager_name; 
  }

  public function getState() {
    return $this->state;
  }

  public function setState($state) {
    $this->state = $state; 
  }

  public function getList() {
    return $this->list;
  }

  public function setList($list) {
    $this->list = $list; 
  }

  public function getListSize() {
    return $this->list_size;
  }

  public function setListSize($list_size) {
    $this->list_size = $list_size; 
  }

  public function getPageSize() {
    return $this->page_size;
  }

  public function setPageSize($page_size) {
    $this->page_size = $page_size; 
  }

  public function buildForm(array $form, FormStateInterface $form_state, $state = NULL, $page = NULL, $pagesize = NULL) {

    // Attach Bootstrap Barrio library.
    $form['#attached']['library'][] = 'bootstrap_barrio/bootstrap_barrio';

    // GET manager EMAIL
    $current_user = \Drupal::currentUser();
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($current_user->id());
    $this->setManagerEmail($user->getEmail());
    $this->setManagerName($user->getAccountName());

    // GET TOTAL NUMBER OF ELEMENTS AND TOTAL NUMBER OF PAGES
    $this->setState($state);
    $this->setPageSize($pagesize);
    $this->setListSize(-1);
    if ($this->getState() != NULL) {
      $this->setListSize(ListDeploymentStatePage::total($this->getState(), $this->getManagerEmail()));
    }
    if (is_string($this->list_size)) {
      $total_pages = 0;
    } else {
      $total_pages = ($this->list_size % $pagesize == 0) ? $this->list_size / $pagesize : floor($this->list_size / $pagesize) + 1;
    }

    // CREATE LINK FOR NEXT PAGE AND PREVIOUS PAGE
    if ($page < $total_pages) {
      $next_page = $page + 1;
      $next_page_link = ListDeploymentStatePage::link($this->getState(), $this->getManagerEmail(), $next_page, $pagesize);
    } else {
      $next_page_link = '';
    }
    if ($page > 1) {
      $previous_page = $page - 1;
      $previous_page_link = ListDeploymentStatePage::link($this->getState(), $this->getManagerEmail(), $previous_page, $pagesize);
    } else {
      $previous_page_link = '';
    }

    // RETRIEVE ELEMENTS
    $this->setList(ListDeploymentStatePage::exec($this->getState(), $this->getManagerEmail(), $page, $pagesize));
    $this->header = Deployment::generateHeader($this->getState());
    $this->output = Deployment::generateOutput($this->getState(), $this->getList());

    // PUT FORM TOGETHER
    $form['page_title'] = [
      '#type' => 'item',
      '#title' => $this->t('<h3>Manage Deployments</h3>'),
    ];
    $form['page_subtitle'] = [
      '#type' => 'item',
      '#title' => $this->t('<h4>Deployments maintained by <font color="DarkGreen">' . $this->getManagerName() . ' (' . $this->getManagerEmail() . ')</font></h4>'),
    ];

    $renderer = \Drupal::service('renderer');

    // Define the tabs
    $tabs = [
        'design' => 'Design',
        'active' => 'Active',
        'closed' => 'Closed',
        'all' => 'All',
    ];

    // Create tab links
    $tab_links = [];
    foreach ($tabs as $key => $label) {
        $tab_links[] = [
            '#type' => 'link',
            '#title' => $label,
            '#url' => '#pills-' . $key,
            '#attributes' => [
                'class' => ['nav-link', $active_state === $key ? 'active' : ''],
                'role' => 'tab',
                'aria-controls' => 'pills-' . $key,
                'aria-selected' => $active_state === $key ? 'true' : 'false',
                'data-bs-toggle' => 'pill',
            ],
        ];
    }

    // Create tab panes
    $tab_panes = [];
    foreach ($tabs as $key => $label) {
        $tab_panes[] = [
            '#type' => 'container',
            '#attributes' => [
                'class' => ['tab-pane', 'fade', $active_state === $key ? 'show active' : ''],
                'role' => 'tabpanel',
                'aria-labelledby' => 'pills-' . $key . '-tab',
            ],
            'content' => [
                '#markup' => $renderer->render($this->generateSubform([], $form_state, $key)),
            ],
        ];
    }

    // Assemble the card structure
    $form['pills_card'] = [
        '#type' => 'container',
        '#attributes' => ['class' => ['card']],
        'header' => [
            '#type' => 'container',
            '#attributes' => ['class' => ['card-header']],
            'tabs' => [
                '#theme' => 'item_list',
                '#items' => $tab_links,
                '#attributes' => ['class' => ['nav', 'nav-pills', 'nav-justified', 'mb-3']],
                //'#list_type' => 'ul',
            ],
        ],
        'body' => [
            '#type' => 'container',
            '#attributes' => ['class' => ['card-body']],
            'tab_content' => [
                '#type' => 'container',
                '#attributes' => ['class' => ['tab-content']],
                //'#children' => $tab_panes,
            ],
        ],
    ];
    
    /*

    // Create Bootstrap card with pills in the header and content in the body.
    $active_state = $state ? $state : 'all';
    $form['pills_card'] = [
        '#type' => 'markup',
        '#markup' => '
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-pills nav-justified mb-3" id="pills-tab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link ' . ($active_state === 'design' ? 'active' : '') . '" id="pills-design-tab" data-bs-toggle="pill" href="#pills-design" role="tab" aria-controls="pills-design" aria-selected="' . ($active_state === 'design' ? 'true' : 'false') . '">Design</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link ' . ($active_state === 'active' ? 'active' : '') . '" id="pills-active-tab" data-bs-toggle="pill" href="#pills-active" role="tab" aria-controls="pills-active" aria-selected="' . ($active_state === 'active' ? 'true' : 'false') . '">Active</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link ' . ($active_state === 'closed' ? 'active' : '') . '" id="pills-closed-tab" data-bs-toggle="pill" href="#pills-closed" role="tab" aria-controls="pills-closed" aria-selected="' . ($active_state === 'closed' ? 'true' : 'false') . '">Closed</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link ' . ($active_state === 'all' ? 'active' : '') . '" id="pills-all-tab" data-bs-toggle="pill" href="#pills-all" role="tab" aria-controls="pills-all" aria-selected="' . ($active_state === 'all' ? 'true' : 'false') . '">All</a>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade ' . ($state === 'design' ? 'show active' : '') . '" id="pills-design" role="tabpanel" aria-labelledby="pills-design-tab">' . 
                        $renderer->render($this->generateSubform([], $form_state, 'design')) . 
                    '</div>
                    <div class="tab-pane fade ' . ($state === 'active' ? 'show active' : '') . '" id="pills-active" role="tabpanel" aria-labelledby="pills-active-tab">' . 
                        $renderer->render($this->generateSubform([], $form_state, 'active')) . 
                    '</div>
                    <div class="tab-pane fade ' . ($state === 'closed' ? 'show active' : '') . '" id="pills-closed" role="tabpanel" aria-labelledby="pills-closed-tab">' . 
                        $renderer->render($this->generateSubform([], $form_state, 'closed')) . 
                    '</div>
                    <div class="tab-pane fade ' . ($state === 'all' ? 'show active' : '') . '" id="pills-all" role="tabpanel" aria-labelledby="pills-all-tab">' . 
                        $renderer->render($this->generateSubform([], $form_state, 'all')) . 
                    '</div>
                </div>
            </div>
        </div>',
    ];
    */

    $form['submit'] = [
        '#type' => 'submit',
        '#value' => $this->t('Back'),
        '#name' => 'back',
    ];
    $form['space'] = [
        '#type' => 'item',
        '#value' => $this->t('<br><br><br>'),
    ];

    /*
    // Conditional form elements based on state
    if ($this->getState() == 'design') {
      $form['add_element'] = [
        '#type' => 'submit',
        '#value' => $this->t('Create Deployment'),
        '#name' => 'add_element',
      ];
      $form['edit_selected_element'] = [
        '#type' => 'submit',
        '#value' => $this->t('Edit Selected'),
        '#name' => 'edit_element',
      ];
      $form['execute_selected_element'] = [
        '#type' => 'submit',
        '#value' => $this->t('Execute Selected'),
        '#name' => 'execute_element',
      ];
      $form['delete_selected_element'] = [
        '#type' => 'submit',
        '#value' => $this->t('Delete Selected'),
        '#name' => 'delete_element',
        '#attributes' => ['onclick' => 'if(!confirm("Really Delete?")){return false;}'],
      ];
    }
    if ($this->getState() == 'active') {
      $form['close_selected'] = [
        '#type' => 'submit',
        '#value' => $this->t('Close Selected'),
        '#name' => 'close_element',
      ];
      $form['modify_selected'] = [
        '#type' => 'submit',
        '#value' => $this->t('Modify Selected'),
        '#name' => 'modify_element',
      ];
    }

    $form['element_table'] = [
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $output,
      '#js_select' => FALSE,
      '#empty' => t('No deployment has been found'),
    ];
    $form['pager'] = [
      '#theme' => 'list-page',
      '#items' => [
        'page' => strval($page),
        'first' => ListDeploymentStatePage::link($this->getState(), $this->getManagerEmail(), 1, $pagesize),
        'last' => ListDeploymentStatePage::link($this->getState(), $this->getManagerEmail(), $total_pages, $pagesize),
        'previous' => $previous_page_link,
        'next' => $next_page_link,
        'last_page' => strval($total_pages),
        'links' => null,
        'title' => ' ',
      ],
    ];
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Back'),
      '#name' => 'back',
    ];
    $form['space'] = [
      '#type' => 'item',
      '#value' => $this->t('<br><br><br>'),
    ];
    */

    return $form;
  }

  public function submitForm(array &$form, FormStateInterface $form_state) {
    // RETRIEVE TRIGGERING BUTTON
    $triggering_element = $form_state->getTriggeringElement();
    $button_name = $triggering_element['#name'];

    // SET USER ID AND PREVIOUS URL FOR TRACKING STORE URLS
    $uid = \Drupal::currentUser()->id();
    $previousUrl = \Drupal::request()->getRequestUri();

    // RETRIEVE SELECTED ROWS, IF ANY
    $selected_rows = $form_state->getValue('element_table');
    $rows = [];
    foreach ($selected_rows as $index => $selected) {
      if ($selected) {
        $rows[$index] = $index;
      }
    }

    // DESIGN STATE
    if ($button_name === 'design_state' && $this->getState() != 'design') {
      $url = Url::fromRoute('dpl.manage_deployments_route');
      $url->setRouteParameter('state', 'design');
      $url->setRouteParameter('page', '1');
      $url->setRouteParameter('pagesize', $this->getPageSize());
      $form_state->setRedirectUrl($url);
      return;
    }

    // ACTIVE STATE
    if ($button_name === 'active_state' && $this->getState() != 'active') {
      $url = Url::fromRoute('dpl.manage_deployments_route');
      $url->setRouteParameter('state', 'active');
      $url->setRouteParameter('page', '1');
      $url->setRouteParameter('pagesize', $this->getPageSize());
      $form_state->setRedirectUrl($url);
      return;
    }

    // CLOSED STATE
    if ($button_name === 'closed_state' && $this->getState() != 'closed') {
      $url = Url::fromRoute('dpl.manage_deployments_route');
      $url->setRouteParameter('state', 'closed');
      $url->setRouteParameter('page', '1');
      $url->setRouteParameter('pagesize', $this->getPageSize());
      $form_state->setRedirectUrl($url);
      return;
    }

    // ALL STATE
    if ($button_name === 'all_state' && $this->getState() != 'all') {
      $url = Url::fromRoute('dpl.manage_deployments_route');
      $url->setRouteParameter('state', 'all');
      $url->setRouteParameter('page', '1');
      $url->setRouteParameter('pagesize', $this->getPageSize());
      $form_state->setRedirectUrl($url);
      return;
    }

    // ADD ELEMENT
    if ($button_name === 'add_element') {
      Utils::trackingStoreUrls($uid, $previousUrl, 'dpl.add_deployment');
      $url = Url::fromRoute('dpl.add_deployment');
      $form_state->setRedirectUrl($url);
    }  

    // EDIT ELEMENT
    if ($button_name === 'edit_element') {
      if (sizeof($rows) < 1) {
        \Drupal::messenger()->addWarning(t("Select the exact deployment to be edited."));      
      } else if (sizeof($rows) > 1) {
        \Drupal::messenger()->addWarning(t("No more than one deployment can be edited at once."));      
      } else {
        $first = array_shift($rows);
        Utils::trackingStoreUrls($uid, $previousUrl, 'dpl.edit_deployment');
        $url = Url::fromRoute('dpl.edit_deployment', ['deploymenturi' => base64_encode($first)]);
        $form_state->setRedirectUrl($url);
      } 
    }

    // EXECUTE ELEMENT
    if ($button_name === 'execute_element') {
      if (sizeof($rows) < 1) {
        \Drupal::messenger()->addWarning(t("Select the exact deployment to be executed."));      
      } else if (sizeof($rows) > 1) {
        \Drupal::messenger()->addWarning(t("No more than one deployment can be executed at once."));      
      } else {
        $first = array_shift($rows);
        Utils::trackingStoreUrls($uid, $previousUrl, 'dpl.execute_close_deployment');
        $url = Url::fromRoute('dpl.execute_close_deployment', [
          'mode' => 'execute',
          'deploymenturi' => base64_encode($first)
        ]);
        $form_state->setRedirectUrl($url);
      } 
    }

    // CLOSE ELEMENT
    if ($button_name === 'close_element') {
      if (sizeof($rows) < 1) {
        \Drupal::messenger()->addWarning(t("Select the exact deployment to be closed."));      
      } else if (sizeof($rows) > 1) {
        \Drupal::messenger()->addWarning(t("No more than one deployment can be closed at once."));      
      } else {
        $first = array_shift($rows);
        Utils::trackingStoreUrls($uid, $previousUrl, 'dpl.execute_close_deployment');
        $url = Url::fromRoute('dpl.execute_close_deployment', [
          'mode' => 'close',
          'deploymenturi' => base64_encode($first)
        ]);
        $form_state->setRedirectUrl($url);
      } 
    }

    // DELETE ELEMENT
    if ($button_name === 'delete_element') {
      if (sizeof($rows) <= 0) {
        \Drupal::messenger()->addWarning(t("At least one deployment needs to be selected to be deleted."));      
        return;
      } else {
        $api = \Drupal::service('rep.api_connector');
        foreach ($rows as $shortUri) {
          $uri = Utils::plainUri($shortUri);
          $api->elementDel('deployment', $uri);
        }
        \Drupal::messenger()->addMessage(t("Selected deployment(s) has/have been deleted successfully."));      
        return;
      }
    }  
    
    // BACK TO LANDING PAGE
    if ($button_name === 'back') {
      $url = Url::fromRoute('rep.home');
      $form_state->setRedirectUrl($url);
      return;
    }  

    return;
  }


  /**
   * Generates a subform based on the state.
   *
   * @param array $form
   *   The form array to which elements will be added.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The form state interface.
   * @param string $state
   *   The current state to determine the conditional elements.
   *
   * @return array
   *   The subform array.
   */
  protected function generateSubform(array $form, FormStateInterface $form_state, $state) {

    // Add state-specific form elements.
    if ($state == 'design') {
        $form['add_element'] = [
            '#type' => 'submit',
            '#value' => $this->t('Create Deployment'),
            '#name' => 'add_element',
        ];
        $form['edit_selected_element'] = [
            '#type' => 'submit',
            '#value' => $this->t('Edit Selected'),
            '#name' => 'edit_element',
        ];
        $form['execute_selected_element'] = [
            '#type' => 'submit',
            '#value' => $this->t('Execute Selected'),
            '#name' => 'execute_element',
        ];
        $form['delete_selected_element'] = [
            '#type' => 'submit',
            '#value' => $this->t('Delete Selected'),
            '#name' => 'delete_element',
            '#attributes' => ['onclick' => 'if(!confirm("Really Delete?")){return false;}'],
        ];
    }
    if ($state == 'active') {
        $form['close_selected'] = [
            '#type' => 'submit',
            '#value' => $this->t('Close Selected'),
            '#name' => 'close_element',
        ];
        $form['modify_selected'] = [
            '#type' => 'submit',
            '#value' => $this->t('Modify Selected'),
            '#name' => 'modify_element',
        ];
    }

    // Add table select and pagination.
    $form['element_table'] = [
        '#type' => 'tableselect',
        '#header' => $this->header, // Assuming you have a method to get header.
        '#options' => $this->output,   // Assuming list options are set.
        '#js_select' => FALSE,
        '#empty' => $this->t('No deployment has been found'),
    ];
    $form['pager'] = [
        '#theme' => 'list-page',
        '#items' => [
            'page' => strval($this->getPageSize()),
            'first' => ListDeploymentStatePage::link($state, $this->getManagerEmail(), 1, $this->getPageSize()),
            'last' => ListDeploymentStatePage::link($state, $this->getManagerEmail(), $this->calculateTotalPages(), $this->getPageSize()),
            //'previous' => $this->getPreviousPageLink(), // Assuming you have methods to get these links.
            //'next' => $this->getNextPageLink(),
            'last_page' => strval($this->calculateTotalPages()),
            'links' => NULL,
            'title' => ' ',
        ],
    ];

    return $form;
  }

    /**
     * Calculate total pages.
     *
     * @return int
     *   The total number of pages.
     */
    protected function calculateTotalPages() {
        $list_size = $this->getListSize();
        return is_string($list_size) ? 0 : ($list_size % $this->getPageSize() == 0 ? $list_size / $this->getPageSize() : floor($list_size / $this->getPageSize()) + 1);
    }

}
